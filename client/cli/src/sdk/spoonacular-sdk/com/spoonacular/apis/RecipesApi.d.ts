import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AnalyzeARecipeSearchQuery200Response } from '..com/spoonacular/client/model/models/AnalyzeARecipeSearchQuery200Response';
import { AnalyzeRecipeInstructions200Response } from '..com/spoonacular/client/model/models/AnalyzeRecipeInstructions200Response';
import { AutocompleteRecipeSearch200ResponseInner } from '..com/spoonacular/client/model/models/AutocompleteRecipeSearch200ResponseInner';
import { ClassifyCuisine200Response } from '..com/spoonacular/client/model/models/ClassifyCuisine200Response';
import { ComputeGlycemicLoad200Response } from '..com/spoonacular/client/model/models/ComputeGlycemicLoad200Response';
import { ComputeGlycemicLoadRequest } from '..com/spoonacular/client/model/models/ComputeGlycemicLoadRequest';
import { ConvertAmounts200Response } from '..com/spoonacular/client/model/models/ConvertAmounts200Response';
import { CreateRecipeCard200Response } from '..com/spoonacular/client/model/models/CreateRecipeCard200Response';
import { GetAnalyzedRecipeInstructions200Response } from '..com/spoonacular/client/model/models/GetAnalyzedRecipeInstructions200Response';
import { GetRandomRecipes200Response } from '..com/spoonacular/client/model/models/GetRandomRecipes200Response';
import { GetRecipeEquipmentByID200Response } from '..com/spoonacular/client/model/models/GetRecipeEquipmentByID200Response';
import { GetRecipeInformation200Response } from '..com/spoonacular/client/model/models/GetRecipeInformation200Response';
import { GetRecipeInformationBulk200ResponseInner } from '..com/spoonacular/client/model/models/GetRecipeInformationBulk200ResponseInner';
import { GetRecipeIngredientsByID200Response } from '..com/spoonacular/client/model/models/GetRecipeIngredientsByID200Response';
import { GetRecipeNutritionWidgetByID200Response } from '..com/spoonacular/client/model/models/GetRecipeNutritionWidgetByID200Response';
import { GetRecipePriceBreakdownByID200Response } from '..com/spoonacular/client/model/models/GetRecipePriceBreakdownByID200Response';
import { GetRecipeTasteByID200Response } from '..com/spoonacular/client/model/models/GetRecipeTasteByID200Response';
import { GetSimilarRecipes200ResponseInner } from '..com/spoonacular/client/model/models/GetSimilarRecipes200ResponseInner';
import { GuessNutritionByDishName200Response } from '..com/spoonacular/client/model/models/GuessNutritionByDishName200Response';
import { ParseIngredients200ResponseInner } from '..com/spoonacular/client/model/models/ParseIngredients200ResponseInner';
import { QuickAnswer200Response } from '..com/spoonacular/client/model/models/QuickAnswer200Response';
import { SearchRecipes200Response } from '..com/spoonacular/client/model/models/SearchRecipes200Response';
import { SearchRecipesByIngredients200ResponseInner } from '..com/spoonacular/client/model/models/SearchRecipesByIngredients200ResponseInner';
import { SearchRecipesByNutrients200ResponseInner } from '..com/spoonacular/client/model/models/SearchRecipesByNutrients200ResponseInner';
import { SummarizeRecipe200Response } from '..com/spoonacular/client/model/models/SummarizeRecipe200Response';
export declare class RecipesApiRequestFactory extends BaseAPIRequestFactory {
    analyzeARecipeSearchQuery(q: string, _options?: Configuration): Promise<RequestContext>;
    analyzeRecipeInstructions(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', _options?: Configuration): Promise<RequestContext>;
    autocompleteRecipeSearch(query?: string, number?: number, _options?: Configuration): Promise<RequestContext>;
    classifyCuisine(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', _options?: Configuration): Promise<RequestContext>;
    computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language?: 'en' | 'de', _options?: Configuration): Promise<RequestContext>;
    convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, _options?: Configuration): Promise<RequestContext>;
    createRecipeCard(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', _options?: Configuration): Promise<RequestContext>;
    equipmentByIDImage(id: number, _options?: Configuration): Promise<RequestContext>;
    extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, includeNutrition?: boolean, includeTaste?: boolean, _options?: Configuration): Promise<RequestContext>;
    getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, _options?: Configuration): Promise<RequestContext>;
    getRandomRecipes(limitLicense?: boolean, tags?: string, number?: number, _options?: Configuration): Promise<RequestContext>;
    getRecipeEquipmentByID(id: number, _options?: Configuration): Promise<RequestContext>;
    getRecipeInformation(id: number, includeNutrition?: boolean, _options?: Configuration): Promise<RequestContext>;
    getRecipeInformationBulk(ids: string, includeNutrition?: boolean, _options?: Configuration): Promise<RequestContext>;
    getRecipeIngredientsByID(id: number, _options?: Configuration): Promise<RequestContext>;
    getRecipeNutritionWidgetByID(id: number, _options?: Configuration): Promise<RequestContext>;
    getRecipePriceBreakdownByID(id: number, _options?: Configuration): Promise<RequestContext>;
    getRecipeTasteByID(id: number, normalize?: boolean, _options?: Configuration): Promise<RequestContext>;
    getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, _options?: Configuration): Promise<RequestContext>;
    guessNutritionByDishName(title: string, _options?: Configuration): Promise<RequestContext>;
    ingredientsByIDImage(id: number, measure?: 'us' | 'metric', _options?: Configuration): Promise<RequestContext>;
    parseIngredients(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', language?: 'en' | 'de', _options?: Configuration): Promise<RequestContext>;
    priceBreakdownByIDImage(id: number, _options?: Configuration): Promise<RequestContext>;
    quickAnswer(q: string, _options?: Configuration): Promise<RequestContext>;
    recipeNutritionByIDImage(id: number, _options?: Configuration): Promise<RequestContext>;
    recipeNutritionLabelImage(id: number, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, _options?: Configuration): Promise<RequestContext>;
    recipeNutritionLabelWidget(id: number, defaultCss?: boolean, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, _options?: Configuration): Promise<RequestContext>;
    recipeTasteByIDImage(id: number, normalize?: boolean, rgb?: string, _options?: Configuration): Promise<RequestContext>;
    searchRecipes(query?: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, _options?: Configuration): Promise<RequestContext>;
    searchRecipesByIngredients(ingredients?: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, _options?: Configuration): Promise<RequestContext>;
    searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, _options?: Configuration): Promise<RequestContext>;
    summarizeRecipe(id: number, _options?: Configuration): Promise<RequestContext>;
    visualizeEquipment(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', accept?: 'application/json' | 'text/html' | 'media/_*', _options?: Configuration): Promise<RequestContext>;
    visualizePriceBreakdown(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', accept?: 'application/json' | 'text/html' | 'media/_*', language?: 'en' | 'de', _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, measure?: 'us' | 'metric', _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeNutrition(contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', accept?: 'application/json' | 'text/html' | 'media/_*', language?: 'en' | 'de', _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, accept?: 'application/json' | 'text/html' | 'media/_*', _options?: Configuration): Promise<RequestContext>;
    visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeTaste(language?: 'en' | 'de', contentType?: 'application/x-www-form-urlencoded' | 'application/json' | 'multipart/form-data', accept?: 'application/json' | 'text/html' | 'media/_*', normalize?: boolean, rgb?: string, _options?: Configuration): Promise<RequestContext>;
    visualizeRecipeTasteByID(id: number, normalize?: boolean, rgb?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class RecipesApiResponseProcessor {
    analyzeARecipeSearchQuery(response: ResponseContext): Promise<AnalyzeARecipeSearchQuery200Response>;
    analyzeRecipeInstructions(response: ResponseContext): Promise<AnalyzeRecipeInstructions200Response>;
    autocompleteRecipeSearch(response: ResponseContext): Promise<Set<AutocompleteRecipeSearch200ResponseInner>>;
    classifyCuisine(response: ResponseContext): Promise<ClassifyCuisine200Response>;
    computeGlycemicLoad(response: ResponseContext): Promise<ComputeGlycemicLoad200Response>;
    convertAmounts(response: ResponseContext): Promise<ConvertAmounts200Response>;
    createRecipeCard(response: ResponseContext): Promise<CreateRecipeCard200Response>;
    equipmentByIDImage(response: ResponseContext): Promise<any>;
    extractRecipeFromWebsite(response: ResponseContext): Promise<GetRecipeInformation200Response>;
    getAnalyzedRecipeInstructions(response: ResponseContext): Promise<GetAnalyzedRecipeInstructions200Response>;
    getRandomRecipes(response: ResponseContext): Promise<GetRandomRecipes200Response>;
    getRecipeEquipmentByID(response: ResponseContext): Promise<GetRecipeEquipmentByID200Response>;
    getRecipeInformation(response: ResponseContext): Promise<GetRecipeInformation200Response>;
    getRecipeInformationBulk(response: ResponseContext): Promise<Set<GetRecipeInformationBulk200ResponseInner>>;
    getRecipeIngredientsByID(response: ResponseContext): Promise<GetRecipeIngredientsByID200Response>;
    getRecipeNutritionWidgetByID(response: ResponseContext): Promise<GetRecipeNutritionWidgetByID200Response>;
    getRecipePriceBreakdownByID(response: ResponseContext): Promise<GetRecipePriceBreakdownByID200Response>;
    getRecipeTasteByID(response: ResponseContext): Promise<GetRecipeTasteByID200Response>;
    getSimilarRecipes(response: ResponseContext): Promise<Set<GetSimilarRecipes200ResponseInner>>;
    guessNutritionByDishName(response: ResponseContext): Promise<GuessNutritionByDishName200Response>;
    ingredientsByIDImage(response: ResponseContext): Promise<any>;
    parseIngredients(response: ResponseContext): Promise<Set<ParseIngredients200ResponseInner>>;
    priceBreakdownByIDImage(response: ResponseContext): Promise<any>;
    quickAnswer(response: ResponseContext): Promise<QuickAnswer200Response>;
    recipeNutritionByIDImage(response: ResponseContext): Promise<any>;
    recipeNutritionLabelImage(response: ResponseContext): Promise<any>;
    recipeNutritionLabelWidget(response: ResponseContext): Promise<string>;
    recipeTasteByIDImage(response: ResponseContext): Promise<any>;
    searchRecipes(response: ResponseContext): Promise<SearchRecipes200Response>;
    searchRecipesByIngredients(response: ResponseContext): Promise<Set<SearchRecipesByIngredients200ResponseInner>>;
    searchRecipesByNutrients(response: ResponseContext): Promise<Set<SearchRecipesByNutrients200ResponseInner>>;
    summarizeRecipe(response: ResponseContext): Promise<SummarizeRecipe200Response>;
    visualizeEquipment(response: ResponseContext): Promise<string>;
    visualizePriceBreakdown(response: ResponseContext): Promise<string>;
    visualizeRecipeEquipmentByID(response: ResponseContext): Promise<string>;
    visualizeRecipeIngredientsByID(response: ResponseContext): Promise<string>;
    visualizeRecipeNutrition(response: ResponseContext): Promise<string>;
    visualizeRecipeNutritionByID(response: ResponseContext): Promise<string>;
    visualizeRecipePriceBreakdownByID(response: ResponseContext): Promise<string>;
    visualizeRecipeTaste(response: ResponseContext): Promise<string>;
    visualizeRecipeTasteByID(response: ResponseContext): Promise<string>;
}
